const express = require(\'express\');\nconst path = require(\'path\');\nconst fs = require(\'fs\').promises;\nconst { GoogleGenerativeAI } = require(\'@google/generative-ai\');\n\n// --- CONFIGURATION ---\nconst PORT = process.env.PORT || 3001;\nconst DATA_FILE = path.join(__dirname, \'db\', \'app-data.json\');\nconst AUDIT_STRUCTURE_FILE = path.join(__dirname, \'db\', \'auditStructure.json\');\nconst API_KEY = process.env.GEMINI_API_KEY;\n\n// --- EXPRESS APP & MIDDLEWARE ---\nconst app = express();\napp.use(express.json({ limit: \'50mb\' }));\napp.use(express.static(path.join(__dirname, \'..\/build\')));\n\n// --- STATE ---\nlet appState = {\n  customers: [],\n  audits: [],\n  reports: []\n};\n\n// --- API ENDPOINTS ---\n\n// Get all application data\napp.get(\'/api/app-data\', async (req, res) => {\n  try {\n    const data = await fs.readFile(DATA_FILE, \'utf8\');\n    res.json(JSON.parse(data));\n  } catch (error) {\n    if (error.code === \'ENOENT\') { // File doesn\'t exist\n      res.json(appState); // Send initial empty state\n    } else {\n      console.error(\"Error reading data file:\", error);\n      res.status(500).send(\'Error reading data\');\n    }\n  }\n});\n\n// Save all application data\napp.post(\'/api/app-data\', async (req, res) => {\n  try {\n    await fs.writeFile(DATA_FILE, JSON.stringify(req.body, null, 2), \'utf8\');\n    res.status(200).send(\'Data saved\');\n  } catch (error) {\n    console.error(\"Error writing data file:\", error);\n    res.status(500).send(\'Error saving data\');\n  }\n});\n\n// Get the audit structure\napp.get(\'/api/audit-structure\', async (req, res) => {\n    try {\n        const structure = await fs.readFile(AUDIT_STRUCTURE_FILE, \'utf8\');\n        res.json(JSON.parse(structure));\n    } catch (error) {\n        console.error(\"Error reading audit structure file:\", error);\n        res.status(500).send(\'Error reading audit structure\');\n    }\n});\n\n// Save the audit structure\napp.post(\'/api/audit-structure\', async (req, res) => {\n    try {\n        await fs.writeFile(AUDIT_STRUCTURE_FILE, JSON.stringify(req.body, null, 2), \'utf8\');\n        res.status(200).send(\'Audit structure saved\');\n    } catch (error) {\n        console.error(\"Error writing audit structure file:\", error);\n        res.status(500).send(\'Error saving audit structure\');\n    }\n});\n\n\n// Generate AI Report\napp.post(\'/api/generate-report\', async (req, res) => {\n    if (!API_KEY) {\n        return res.status(500).json({ error: \'API klíč pro Gemini není nastaven na serveru.\' });\n    }\n\n    try {\n        const { auditData, auditStructure } = req.body;\n        if (!auditData || !auditStructure) {\n            return res.status(400).json({ error: \'Chybějící data auditu nebo struktura.\' });\n        }\n\n        const genAI = new GoogleGenerativeAI(API_KEY);\n        const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n        const nonCompliantAnswers = Object.values(auditData.answers).filter(a => !a.compliant && a.nonComplianceData);\n        const nonCompliantItems = auditStructure.audit_sections\n            .flatMap(section => \n                section.items.map(item => {\n                    const answer = auditData.answers[item.id];\n                    return { ...item, sectionTitle: section.title, answer };\n                })\n            )\n            .filter(item => item.answer && !item.answer.compliant && item.answer.nonComplianceData && item.answer.nonComplianceData.length > 0)\n            .map(item => ({\n                title: item.title,\n                section: item.sectionTitle,\n                comment: item.answer.nonComplianceData[0].comment,\n                deadline: item.answer.nonComplianceData[0].deadline\n            }));\n\n\n        const neshodyText = nonCompliantItems.length > 0 \n            ? nonCompliantItems.map(item => \n                `- Sekce: ${item.section}\\\\n  Položka: ${item.title}\\\\n  Zjištění: ${item.comment}\\\\n  Termín: ${item.deadline ? new Date(item.deadline).toLocaleDateString(\'cs-CZ\') : \'Neuveden\'}`\n              ).join(\'\\\\n\')\n            : \"Žádné neshody nebyly zjištěny.\";\n\n        const prompt = `\n            Jsi expert na hygienu potravin a HACCP. Tady jsou data z interního hygienického auditu.\\n            Neshody jsou uvedeny s detaily. Pokud žádné nebyly, je to explicitně uvedeno.\\n\n            **Data auditu:**\\n            Datum auditu: ${auditData.completedAt ? new Date(auditData.completedAt).toLocaleDateString(\'cs-CZ\') : \'NEUVEDENO\'}\\n            Provozovna: ${auditData.headerValues.premise_name}\\n\n            **Zjištěné neshody:**\\n            ${neshodyText}\\n\n            **TVŮJ ÚKOL:**\\n            1.  Analyzuj poskytnuté neshody (nebo jejich absenci).\\n            2.  Vytvoř JSON objekt, který bude obsahovat DVA klíče: \\\"summary\\\" a \\\"conclusion\\\".\\n            3.  Do klíče \\\"summary\\\" vlož pole objektů. Každý objekt bude reprezentovat jednu oblast (např. \\\"Infrastruktura\\\", \\\"Osobní hygiena\\\") a bude mít dva klíče: \\\"area\\\" (název oblasti) a \\\"findings\\\" (textový souhrn zjištění v dané oblasti). Seskupuj podobné problémy. Pokud nebyly zjištěny žádné neshody, vrať prázdné pole [].\\n            4.  Do klíče \\\"conclusion\\\" vlož závěrečný text, který zhodnotí celkový stav. \\n                - Pokud byly nalezeny neshody, konstatuj, že zavedené postupy nejsou plně v souladu se zásadami HACCP a správné praxe, a zdůrazni nutnost přijetí nápravných opatření.\\n                - Pokud nebyly nalezeny žádné neshody, konstatuj, že provozovna splňuje všechny sledované hygienické standardy a zásady správné praxe.\\n\n            **PRAVIDLA:**\\n            - Vždy vrať validní JSON.\\n            - Texty formuluj stručně, jasně a profesionálně.\\n            - NIKDY si nevymýšlej neshody, které nejsou v seznamu.\\n            - NIKDY nezmiňuj datum a místo auditu ve svých textech, to bude doplněno automaticky.\\n\n            **Příklad výstupu (pokud jsou neshody):**\\n            \\`\\`\\`json\\n            {\\n              \\\"summary\\\": [\\n                {\\n                  \\\"area\\\": \\\"Personál\\\",\\n                  \\\"findings\\\": \\\"Někteří zaměstnanci neměli pokrývku hlavy a bylo zjištěno nedostatečné mytí rukou.\\\"\\n                },\\n                 {\\n                  \\\"area\\\": \\\"Skladování\\\",\\n                  \\\"findings\\\": \\\"Potraviny v chladicím boxu nebyly řádně označeny datem spotřeby.\\\"\\n                }\\n              ],\\n              \\\"conclusion\\\": \\\"Zavedené postupy nejsou plně v souladu se zásadami HACCP a správné praxe. Je nutné přijmout nápravná opatření ve stanovených termínech a proškolit personál.\\\"\\n            }\\n            \\`\\`\\`\\n\\n            **Příklad výstupu (pokud nejsou neshody):**\\n            \\`\\`\\`json\\n            {\\n              \\\"summary\\\": [],\\n              \\\"conclusion\\\": \\\"Všechny sledované oblasti jsou v souladu s hygienickými standardy a zásadami správné praxe.\\\"\\n            }\\n            \\`\\`\\`\\n        `;\n\n        const result = await model.generateContent(prompt);\\n        const response = await result.response;\\n        const text = response.text();\\n        \\n        // Basic cleanup to get only the JSON part\\n        const jsonText = text.substring(text.indexOf(\'{\'), text.lastIndexOf(\'}\') + 1);\\n\n        res.json({ result: JSON.parse(jsonText) });\n\n    } catch (error) {\\n        console.error(\'Error generating AI report:\', error);\n        res.status(500).json({ error: \'Došlo k chybě při generování reportu: \' + error.message });\\n    }\\n});\\n\n// --- FALLBACK & SERVER START ---\\n\n// Fallback for client-side routing\\napp.get(\'*\', (req, res) => {\n  res.sendFile(path.join(__dirname, \'..\/build\', \'index.html\'));\n});\n\napp.listen(PORT, () => {\n  console.log(`Server listening on ${PORT}`);\n});